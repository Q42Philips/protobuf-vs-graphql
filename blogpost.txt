THE HACKER NEWS BLOGPOST

GraphQL vs gRPC performance benchmark.

GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing
data. When you send a query to GraphQL you will get exactly what you asked for nothing more or less.
It is also really easy to use and you can get all your nested data in one request.

gRPC is an open source remote procedure call system, and it uses HTTP/2 for transport.
The biggest feature added by gRPC is the concept of protobufs. Protobufs are language and platform 
neutral systems used to serialize data, meaning that these communications can be efficiently 
serialized and communicated in an effective manner. This means the main selling point of gRPC is 
the execptional speed.

So the main question now is can we get best of both worlds, easy programming, nice quering and speed?

People on the internet say (https://dev.to/plutov/benchmarking-grpc-and-rest-in-go-565) 
gRPC is about 10 times faster then GraphQL but is this really the case? So I decided to test the 
performance loss when migrating from gRPC to GraphQL. And the results will surprise you.

I decided to create a localhost server for GraphQL and gRPC and then query data from there to test the
latency. Then plot the results using python matplotlib. 

[add results image]

This gives some very expected results. As all other blog posts said gRPC is about 10 times faster.

So next up I decided to test sending very large messages (MegaBytes instead of several bytes).

[add results image]

These results are quite nice since they show that very large messages does not affect the performance
much. 

But still I am not happy with the fact that GraphQL is 10X slower. That probably means I am not going
to migrate because that is a very significant difference. But then I decided to investigate.

As it turns out gRPC uses keep alive headers by default. You can also see this in the plots when you
go all the way to the right. There is one little bar around the 12 milliseconds mark. This is becuase
of the fact that for keep-alive you need to first establish a handshake. This first handshake takes 
(relativly) long. But after this handshake is established you do not need to repeat this process.
This makes a huge performance difference. So then I thought is it not possible to enable keep-alive
headers with GraphQL since that would make the results fair. Good news the keep-alive headers worked
for GraphQL. 

[add results image]

Wow these results are great. In fact even a little better then gRPC. Which to this day I still find
weird. But still this means I could migrate to GraphQL since the performance is (almost) the 
same. 

If you would like to recreate these results you can try it yourself right here:
https://github.com/Q42Philips/protobuf-vs-graphql

Feedback is always welcome!
